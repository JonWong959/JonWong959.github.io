<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>flaskを用いて作ったシンプルな書籍管理システム</title>
    <link href="/2022/04/03/flask%E3%82%92%E7%94%A8%E3%81%84%E3%81%A6%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AA%E6%9B%B8%E7%B1%8D%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/"/>
    <url>/2022/04/03/flask%E3%82%92%E7%94%A8%E3%81%84%E3%81%A6%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AA%E6%9B%B8%E7%B1%8D%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="最近、PythonでWeb開発の勉強をしていて、flaskという面白いフレームワークに出会いました。そこで、flaskフレームワークを使って簡単な書籍管理システムを作り、データベースに対するCRUD操作を実装し、herokuにデプロイしました。"><a href="#最近、PythonでWeb開発の勉強をしていて、flaskという面白いフレームワークに出会いました。そこで、flaskフレームワークを使って簡単な書籍管理システムを作り、データベースに対するCRUD操作を実装し、herokuにデプロイしました。" class="headerlink" title="最近、PythonでWeb開発の勉強をしていて、flaskという面白いフレームワークに出会いました。そこで、flaskフレームワークを使って簡単な書籍管理システムを作り、データベースに対するCRUD操作を実装し、herokuにデプロイしました。"></a>最近、PythonでWeb開発の勉強をしていて、flaskという面白いフレームワークに出会いました。そこで、flaskフレームワークを使って簡単な書籍管理システムを作り、データベースに対するCRUD操作を実装し、herokuにデプロイしました。</h4><h1 id="デモアドレス"><a href="#デモアドレス" class="headerlink" title="デモアドレス"></a>デモアドレス</h1><h5 id="https-flask-sql-booksystem-herokuapp-com"><a href="#https-flask-sql-booksystem-herokuapp-com" class="headerlink" title="https://flask-sql-booksystem.herokuapp.com/"></a><a href="https://flask-sql-booksystem.herokuapp.com/">https://flask-sql-booksystem.herokuapp.com/</a></h5><h1 id="ファイルの構成"><a href="#ファイルの構成" class="headerlink" title="ファイルの構成"></a>ファイルの構成</h1><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus">.<br>├── Procfile<br>├── __pycache__<br>│   └── app<span class="hljs-selector-class">.cpython-310</span><span class="hljs-selector-class">.pyc</span><br>├── app<span class="hljs-selector-class">.py</span><br>├── flask_sql_book<span class="hljs-selector-class">.db</span><br>├── requirements<span class="hljs-selector-class">.txt</span><br>├── static<br>│   ├── css<br>│   │   └── style<span class="hljs-selector-class">.css</span><br>│   └── imgs<br>│       └── joncat<span class="hljs-selector-class">.jpg</span><br>└── templates<br>    └── books.html<br></code></pre></td></tr></table></figure><h1 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h1><h3 id="①バックエンド部分"><a href="#①バックエンド部分" class="headerlink" title="①バックエンド部分"></a>①バックエンド部分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, flash, redirect, url_for, request<br><span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy<br><span class="hljs-keyword">from</span> flask_wtf <span class="hljs-keyword">import</span> FlaskForm<br><span class="hljs-keyword">from</span> wtforms <span class="hljs-keyword">import</span> StringField, SubmitField<br><span class="hljs-keyword">from</span> wtforms.validators <span class="hljs-keyword">import</span> DataRequired<br><br>app = Flask(__name__)<br><br><br><span class="hljs-comment">#データベースへの接続</span><br><span class="hljs-comment">#app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;mysql+pymysql://root:rootpass@127.0.0.1/flask_sql_book&#x27;</span><br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="hljs-string">&#x27;sqlite:///flask_sql_book.db&#x27;</span><br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="hljs-literal">False</span><br>app.secret_key = <span class="hljs-string">&#x27;jonwong&#x27;</span><br><br><span class="hljs-comment"># データベースオブジェクトの作成</span><br>db = SQLAlchemy(app)<br><br><span class="hljs-comment">#データベースモデル</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span>(db.Model):<br>    <span class="hljs-comment">#テーブル名</span><br>    __tablename__ = <span class="hljs-string">&#x27;authors&#x27;</span><br><br>    <span class="hljs-comment">#table column</span><br>    <span class="hljs-built_in">id</span> = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    name = db.Column(db.String(<span class="hljs-number">16</span>), unique=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># relationship</span><br>    books = db.relationship(<span class="hljs-string">&#x27;Book&#x27;</span>, backref=<span class="hljs-string">&#x27;author&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;Role: %s %s&gt;&#x27;</span> % (self.name, self.<span class="hljs-built_in">id</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(db.Model):<br>    __tablename__ = <span class="hljs-string">&#x27;books&#x27;</span><br>    <span class="hljs-built_in">id</span> = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    name = db.Column(db.String(<span class="hljs-number">32</span>), unique=<span class="hljs-literal">True</span>)<br>    author_id = db.Column(db.Integer, db.ForeignKey(<span class="hljs-string">&#x27;authors.id&#x27;</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;Role: %s %s&gt;&#x27;</span> % (self.name, self.author_id)<br><br><span class="hljs-comment">#カスタムフォーム</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorForm</span>(<span class="hljs-title class_ inherited__">FlaskForm</span>):<br>    author = StringField(<span class="hljs-string">&#x27;著者&#x27;</span>, validators=[DataRequired()])<br>    book = StringField(<span class="hljs-string">&#x27;書籍&#x27;</span>, validators=[DataRequired()])<br>    submit = SubmitField(<span class="hljs-string">&#x27;Submit&#x27;</span>)<br><br><br>db.drop_all()<br>db.create_all()<br><span class="hljs-comment"># demoデータ</span><br>au1 = Author(name=<span class="hljs-string">&#x27;Stephen Prata&#x27;</span>)<br>au2 = Author(name=<span class="hljs-string">&#x27;Alfred Aho&#x27;</span>)<br>au3 = Author(name=<span class="hljs-string">&#x27;Bruce Eckel&#x27;</span>)<br><span class="hljs-comment"># demoデータ追加</span><br>db.session.add_all([au1, au2, au3])<br><span class="hljs-comment"># demoデータcommit</span><br>db.session.commit()<br><br>bk1 = Book(name=<span class="hljs-string">&#x27;C Primer Plus&#x27;</span>, author_id=au1.<span class="hljs-built_in">id</span>)<br>bk2 = Book(name=<span class="hljs-string">&#x27;C++ Primer Plus&#x27;</span>, author_id=au1.<span class="hljs-built_in">id</span>)<br>bk3 = Book(name=<span class="hljs-string">&#x27;Compilers&#x27;</span>, author_id=au2.<span class="hljs-built_in">id</span>)<br>bk4 = Book(name=<span class="hljs-string">&#x27;Thinking in Java&#x27;</span>, author_id=au3.<span class="hljs-built_in">id</span>)<br>bk5 = Book(name=<span class="hljs-string">&#x27;Thinking in C++&#x27;</span>, author_id=au3.<span class="hljs-built_in">id</span>)<br>db.session.add_all([bk1, bk2, bk3, bk4, bk5])<br>db.session.commit()<br><br><span class="hljs-comment">#著者の削除</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/delete_author/&lt;int:author_id&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_author</span>(<span class="hljs-params">author_id</span>):<br><span class="hljs-comment">#クエリ</span><br>    author = Author.query.get(author_id)<br><span class="hljs-comment">#存在すれば削除</span><br>    <span class="hljs-keyword">if</span> author:<br>        <span class="hljs-keyword">try</span>:<br>            Book.query.filter_by(author_id=author.<span class="hljs-built_in">id</span>).delete()<br>            db.session.delete(author)<br>            db.session.commit()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            flash(<span class="hljs-string">&#x27;著者削除のエラー&#x27;</span>)<br>            db.session.rollback()<br>    <span class="hljs-keyword">else</span>:<br>        flash(<span class="hljs-string">&#x27;該当著者は見つかりませんでした&#x27;</span>)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br><span class="hljs-comment">#書籍部分の削除</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/delete_book/&lt;int:book_id&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_book</span>(<span class="hljs-params">book_id</span>):<br>    <span class="hljs-comment">#クエリ</span><br>    book = Book.query.get(book_id)<br>    <span class="hljs-comment">#存在すれば削除</span><br>    <span class="hljs-keyword">if</span> book:<br>        <span class="hljs-keyword">try</span>:<br>            db.session.delete(book)<br>            db.session.commit()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span> (e)<br>            flash(<span class="hljs-string">&#x27;書籍の削除エラー&#x27;</span>)<br>            db.session.rollback()<br>    <span class="hljs-keyword">else</span>:<br>        flash(<span class="hljs-string">&#x27;該当書籍は見つかりませんでした&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():  <span class="hljs-comment"># put application&#x27;s code here</span><br>    <span class="hljs-comment">#フォームを作成する</span><br>    author_form = AuthorForm()<br>    <span class="hljs-keyword">if</span> author_form.validate_on_submit():<br>        author_name = author_form.author.data<br>        book_name = author_form.book.data<br>        <span class="hljs-comment">#バリデーションのためのWTFフォーム関数を呼び出す</span><br>        author = Author.query.filter_by(name=author_name).first()<br>        <span class="hljs-comment">#著者が存在する</span><br>        <span class="hljs-keyword">if</span> author:<br>            book = Book.query.filter_by(name=book_name).first()<br>            <span class="hljs-keyword">if</span> book:<br>                flash(<span class="hljs-string">&#x27;同名の書籍がすでに存在します&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    new_book = Book(name=book_name, author_id=author.<span class="hljs-built_in">id</span>)<br>                    db.session.add(new_book)<br>                    db.session.commit()<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    flash(<span class="hljs-string">&#x27;書籍の追加に失敗しました&#x27;</span>)<br>                    <span class="hljs-built_in">print</span>(e)<br>                    db.session.rollback()<br>        <span class="hljs-comment">#著者が存在しない</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">try</span>:<br>              <span class="hljs-comment">#データベースに新しい著者を插入する</span><br>                new_author = Author(name=author_name)<br>                db.session.add(new_author)<br>                db.session.commit()<br><span class="hljs-comment">#データベースに新しい書籍を插入する</span><br>                new_book = Book(name=book_name, author_id=new_author.<span class="hljs-built_in">id</span>)<br>                db.session.add(new_book)<br>                db.session.commit()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                flash(<span class="hljs-string">&#x27;著者の追加に失敗しました&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(e)<br>                db.session.rollback()<br><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-comment">#最初にページに入るときにフラッシュメッセージが出ないようにする（getメソッド）</span><br>        <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>            flash(<span class="hljs-string">&#x27;著者名または書名をお書き添えください。&#x27;</span>)<br><br>    <span class="hljs-comment">#すべての著者情報をテンプレートに渡す</span><br>    authors = Author.query.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-built_in">print</span>(authors)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;books.html&#x27;</span>, authors=authors, form=author_form)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h3 id="②フロントエンド部分"><a href="#②フロントエンド部分" class="headerlink" title="②フロントエンド部分"></a>②フロントエンド部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ja&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123;url_for(&#x27;static&#x27;, filename=&#x27;css/style.css&#x27;)&#125;&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fonts.googleapis.com/css?family=M+PLUS+1p&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>図書管理システム<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>図書管理システム<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>著者名と書籍名を入力してください。<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    &#123;&#123; form.csrf_token() &#125;&#125;<br>    &#123;&#123; form.author.label &#125;&#125;:&#123;&#123; form.author (class = &quot;input_box&quot;,placeholder=&quot;著者名を入力&quot;)&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &#123;&#123; form.book.label &#125;&#125;:&#123;&#123; form.book (class = &quot;input_box&quot;,placeholder=&quot;書籍名を入力&quot;)&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &#123;&#123; form.submit&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &#123;% for message in get_flashed_messages() %&#125;<br>        &#123;&#123; message &#125;&#125;<br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    &#123;% for author in authors %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; author.name &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">url_for</span>(&quot;<span class="hljs-attr">delete_author</span>&quot;, <span class="hljs-attr">author_id</span>=<span class="hljs-string">author.id)</span> &#125;&#125;&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        &#123;% for book in author.books %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; book.name &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&quot;</span><span class="hljs-attr">delete_book</span>&quot;, <span class="hljs-attr">book_id</span>=<span class="hljs-string">book.id)</span> &#125;&#125;&quot;&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% else %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>none<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endfor %&#125;<br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    &#123;% endfor %&#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode刷题日记丨01.两数和</title>
    <link href="/2022/03/19/LeetCode%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E4%B8%A801-%E4%B8%A4%E6%95%B0%E5%92%8C/"/>
    <url>/2022/03/19/LeetCode%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E4%B8%A801-%E4%B8%A4%E6%95%B0%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="今天刷的是罪恶的开始两数和">今天刷的是罪恶的开始，两数和。</h3><p>原先是想要直接两个for循环搞定的，但是这样子的话复杂度就上到n²了，于是我想到了python有字典这个东西，尝试用哈希表去解决。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums, target</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :type target: int</span><br><span class="hljs-string">        :rtype: List[int]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        hashmap = &#123;&#125;<br>        <span class="hljs-keyword">for</span> i,n <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> target - n <span class="hljs-keyword">in</span> hashmap:<br>                <span class="hljs-keyword">return</span> (hashmap[target - n], i)<br>            hashmap[nums[i]] = i<br>        <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>字典<code>hashmap</code>中<code>key</code>为当前枚举的数，<code>value</code>为当前数的下标（index）。</p><p>for循环<code>i</code>是index，也就是下标，<code>n</code>是num所给的数字，通过<code>eunmerate</code>进行枚举。</p><p>首先一边遍历所给数组<code>nums</code>，一边检验我们要查找的<code>target - n</code>是否存在于hashmap，存在的话则返回两者的<code>index</code>值，没有的话就把当前的值存在hashmap中。</p>]]></content>
    
    
    
    <tags>
      
      <tag>刷题日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过branch实现多端更新hexo博客</title>
    <link href="/2022/03/13/%E9%80%9A%E8%BF%87branch%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E6%9B%B4%E6%96%B0hexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/03/13/%E9%80%9A%E8%BF%87branch%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E6%9B%B4%E6%96%B0hexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="通过git-branch实现多终端同步更新hexo博客">通过gitbranch实现多终端同步更新hexo博客</h1><h3 id="缘由">缘由：</h3><p>​原来一直用Windows的本子来搭建hexo博客，前段时间添加了一台Mac设备。通过将原来Windows本子上面的hexo工程嫁接到Mac设备上，大致理解了一些git的工作方式，这次突发奇想，想要两台设备都能更新，但是由于hexo的机制问题不能直接推拉，于是有了下面一系列的操作。</p><h3 id="hexo的机制">hexo的机制：</h3><p>​ hexo的机制为通过hexod来向远端仓库推送本地编译后的文件，只是生成了网页文件，换句话说就是并没有把全部源文件上传上去。想要实现多终端同步更新就得通过整个源文件的推拉来进行，所以我们可以利用分支来储存源文件。</p><h3id="创建分支并上传源文件原电脑上操作">创建分支并上传源文件（原电脑上操作）：</h3><ol type="1"><li><h5 id="创建分支">创建分支</h5><p>首先在github上新建一个分支（这里我新建了一个叫做hexo的分支），如图：</p><img src="/2022/03/13/%E9%80%9A%E8%BF%87branch%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E6%9B%B4%E6%96%B0hexo%E5%8D%9A%E5%AE%A2/5f31c6af7d27f59ad7f5e7f97efa40c2.png" class=""><p>为了不用每次都指定分支，我们把新建的hexo分支设置成默认分支。</p><img src="/2022/03/13/%E9%80%9A%E8%BF%87branch%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E6%9B%B4%E6%96%B0hexo%E5%8D%9A%E5%AE%A2/Snipaste_2022-03-13_01-01-24.png" class=""></li><li><h5 id="克隆到本地">克隆到本地</h5><p>​ 利用终端克隆到本地：</p><figure class="highlight nginx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> clone git<span class="hljs-variable">@github</span>.com:J<span class="hljs-literal">on</span>Wong959/J<span class="hljs-literal">on</span>Wong959.github.io.git<br></code></pre></td></tr></table></figure><p>​ (注意这里要修改成<strong>自己的</strong>仓库ssh地址)</p></li><li><h5 id="源文件整理">源文件整理</h5><p>​ 把clone下来的</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Jo<span class="hljs-symbol">nWong959</span>.github.io<br></code></pre></td></tr></table></figure><p>​文件夹里面.git文件夹之外的文件全部删除，然后把原来博客的源文件（.deploy_git不要）全部复制进来，注意不要漏掉.gitignore，如名字所示用来忽略到一些不必要上传的文件。<strong>注意：如果用了主题，且主题里有.git文件需要删除掉，因为git不能嵌套上传，会报错。</strong></p></li><li><h5 id="更新分支">更新分支</h5><p>最后是提交更新：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&quot;hexo&quot;</span><br>git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure><p>​ 这样子分支就提交完毕了。</p></li></ol><h3 id="另外一台电脑上的操作">另外一台电脑上的操作：</h3><p>​由于我两台电脑都搭建好了环境，所以我在这里就不赘述hexo的搭建了，具体可以看官方的操作手册。</p><p>​接下来跟刚刚一样把分支给clone下来，然后进入<strong>clone下来的文件夹</strong>操作，也就是说得进入JonWong959.github.io文件夹进行下面的操作：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br>npm <span class="hljs-keyword">install</span> hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后就可以正常写博客进行生成和推送操作了。</p><h2 id="需要注意的地方">需要注意的地方：</h2><p>1.每次在任意一台电脑操作完记得更新下分支：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&quot;hexo&quot;</span><br>git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure><p>2.换到另一台电脑操作时候需要把远端仓库源码拉取到本地，更新本地文件再操作：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><h1 id="一句话总结">一句话总结：</h1><h2id="hexo-d推送静态网页到master分支供别人访问git-push推送整个博客的源代码到分支进行备份方便在不同端进行同步">hexod推送静态网页到master分支供别人访问，gitpush推送整个博客的源代码到分支进行备份，方便在不同端进行同步。</h2>]]></content>
    
    
    
    <tags>
      
      <tag>git技术 博客维护</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>按位置加权算法</title>
    <link href="/2022/03/06/%E6%8C%89%E4%BD%8D%E7%BD%AE%E5%8A%A0%E6%9D%83%E7%AE%97%E6%B3%95/"/>
    <url>/2022/03/06/%E6%8C%89%E4%BD%8D%E7%BD%AE%E5%8A%A0%E6%9D%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>最近刷的一道算法题，发现了一个比较有趣的算法，记录一下</p><p>题目有一部分是求位数加权和： <span class="math display">\[\sum_{i=1}^n c_i\times(n-i+1)\]</span> 例如【43152】： <span class="math display">\[Val=4\times5+3\times4+1\times3+5\times2+2\times1\]</span> 一般写法为：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs python">val = <span class="hljs-number">0</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)):<br>    val += <span class="hljs-built_in">list</span>[i] * (<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) - i)<br><span class="hljs-built_in">print</span>(val)<br></code></pre></td></tr></table></figure><p>书上的写法为将数组的第一位置0，然后从第二位开始加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">val = <span class="hljs-number">0</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)):<br>    <span class="hljs-built_in">list</span>[i] = <span class="hljs-built_in">list</span>[i] + <span class="hljs-built_in">list</span>[i-<span class="hljs-number">1</span>]<br>    val += <span class="hljs-built_in">list</span>[i]<br><span class="hljs-built_in">print</span>(val)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo发文报错can not read a block mapping entry</title>
    <link href="/2022/02/12/%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E6%96%87%E6%8A%A5%E9%94%99/"/>
    <url>/2022/02/12/%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E6%96%87%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>今天使用hexo发文时候，输入<code>hexo g</code>的时候报错：</p><p><code>can not read a block mapping entry; a multiline key may not be an implicit key at line *, column *:</code></p><p>上网转了一圈发现是设置tag属性之后没有加空格，导致报错，甚至整个博客页面崩溃。</p><p>所以要严格按照语法来写文章头部。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客推送github显示鉴权失败</title>
    <link href="/2022/02/12/hexo%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81github%E6%98%BE%E7%A4%BA%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5/"/>
    <url>/2022/02/12/hexo%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81github%E6%98%BE%E7%A4%BA%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<p>更换新电脑，部署hexo博客的时候，向仓库推时报错，显示鉴权失败，记录下解决办法。</p><h2 id="解决过程">解决过程</h2><h4 id="环境说明">环境说明</h4><p>客户端：macOS M1芯片</p><p>托管平台：github</p><h4 id="问题描述">问题描述：</h4><p>在使用<code>hexo d</code>推送时，出现鉴权失败错误。</p><h2 id="解决方案">解决方案</h2><p>修改站点配置文件<code>_config.yml</code></p><figure class="highlight dts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:JonWong959/JonWong959.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>把repo从https地址改成SSH地址。</p>]]></content>
    
    
    
    <tags>
      
      <tag>问题解决</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
